
SPI_FLASH_DRIVER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800124c  0800124c  0001124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001644  08001644  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001644  08001644  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001644  08001644  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001644  08001644  00011644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001648  08001648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800164c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  08001650  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001650  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f20  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f65  00000000  00000000  00025f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00026ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00027100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000105eb  00000000  00000000  000272d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003457  00000000  00000000  000378c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000569b7  00000000  00000000  0003ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000916d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000086c  00000000  00000000  00091724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001234 	.word	0x08001234

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001234 	.word	0x08001234

080001d8 <Console_Init>:

#include "Console.h"


  void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]

	if(port == USART1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4a4a      	ldr	r2, [pc, #296]	; (8000310 <Console_Init+0x138>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d12e      	bne.n	8000248 <Console_Init+0x70>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80001ea:	4b4a      	ldr	r3, [pc, #296]	; (8000314 <Console_Init+0x13c>)
 80001ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001ee:	4a49      	ldr	r2, [pc, #292]	; (8000314 <Console_Init+0x13c>)
 80001f0:	f043 0310 	orr.w	r3, r3, #16
 80001f4:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80001f6:	2307      	movs	r3, #7
 80001f8:	228c      	movs	r2, #140	; 0x8c
 80001fa:	2109      	movs	r1, #9
 80001fc:	4846      	ldr	r0, [pc, #280]	; (8000318 <Console_Init+0x140>)
 80001fe:	f000 f893 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_RX);
 8000202:	2307      	movs	r3, #7
 8000204:	228c      	movs	r2, #140	; 0x8c
 8000206:	210a      	movs	r1, #10
 8000208:	4843      	ldr	r0, [pc, #268]	; (8000318 <Console_Init+0x140>)
 800020a:	f000 f88d 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 800021a:	4b40      	ldr	r3, [pc, #256]	; (800031c <Console_Init+0x144>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	fbb3 f3f2 	udiv	r3, r3, r2
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	461a      	mov	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f043 0204 	orr.w	r2, r3, #4
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	60da      	str	r2, [r3, #12]
	}




}
 8000246:	e05e      	b.n	8000306 <Console_Init+0x12e>
	else if(port == USART2)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a35      	ldr	r2, [pc, #212]	; (8000320 <Console_Init+0x148>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d128      	bne.n	80002a2 <Console_Init+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000250:	4b30      	ldr	r3, [pc, #192]	; (8000314 <Console_Init+0x13c>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000254:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <Console_Init+0x13c>)
 8000256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025a:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 800025c:	2307      	movs	r3, #7
 800025e:	228c      	movs	r2, #140	; 0x8c
 8000260:	2102      	movs	r1, #2
 8000262:	482d      	ldr	r0, [pc, #180]	; (8000318 <Console_Init+0x140>)
 8000264:	f000 f860 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_RX);
 8000268:	2307      	movs	r3, #7
 800026a:	228c      	movs	r2, #140	; 0x8c
 800026c:	2103      	movs	r1, #3
 800026e:	482a      	ldr	r0, [pc, #168]	; (8000318 <Console_Init+0x140>)
 8000270:	f000 f85a 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	60da      	str	r2, [r3, #12]
		port -> BRR = 0x1388;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f241 3288 	movw	r2, #5000	; 0x1388
 8000286:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	f043 0208 	orr.w	r2, r3, #8
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	f043 0204 	orr.w	r2, r3, #4
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	60da      	str	r2, [r3, #12]
}
 80002a0:	e031      	b.n	8000306 <Console_Init+0x12e>
	else if(port == USART6)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <Console_Init+0x14c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d12d      	bne.n	8000306 <Console_Init+0x12e>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <Console_Init+0x13c>)
 80002ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <Console_Init+0x13c>)
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 80002b6:	2308      	movs	r3, #8
 80002b8:	228c      	movs	r2, #140	; 0x8c
 80002ba:	210b      	movs	r1, #11
 80002bc:	4816      	ldr	r0, [pc, #88]	; (8000318 <Console_Init+0x140>)
 80002be:	f000 f833 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 80002c2:	2308      	movs	r3, #8
 80002c4:	228c      	movs	r2, #140	; 0x8c
 80002c6:	210c      	movs	r1, #12
 80002c8:	4813      	ldr	r0, [pc, #76]	; (8000318 <Console_Init+0x140>)
 80002ca:	f000 f82d 	bl	8000328 <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <Console_Init+0x144>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	0112      	lsls	r2, r2, #4
 80002e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80002e6:	011b      	lsls	r3, r3, #4
 80002e8:	461a      	mov	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f043 0208 	orr.w	r2, r3, #8
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f043 0204 	orr.w	r2, r3, #4
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	60da      	str	r2, [r3, #12]
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40011000 	.word	0x40011000
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000
 800031c:	20000000 	.word	0x20000000
 8000320:	40004400 	.word	0x40004400
 8000324:	40011400 	.word	0x40011400

08000328 <GPIO_Pin_Setup>:

#include "GPIO.h"


void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4603      	mov	r3, r0
 8000338:	70fb      	strb	r3, [r7, #3]
 800033a:	460b      	mov	r3, r1
 800033c:	70bb      	strb	r3, [r7, #2]
 800033e:	4613      	mov	r3, r2
 8000340:	707b      	strb	r3, [r7, #1]
	if(Port == GPIOA)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a43      	ldr	r2, [pc, #268]	; (8000454 <GPIO_Pin_Setup+0x12c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a42      	ldr	r2, [pc, #264]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
 8000356:	e02a      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOB)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a40      	ldr	r2, [pc, #256]	; (800045c <GPIO_Pin_Setup+0x134>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
 800036c:	e01f      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOC)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a3b      	ldr	r2, [pc, #236]	; (8000460 <GPIO_Pin_Setup+0x138>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8000376:	4b38      	ldr	r3, [pc, #224]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
 8000382:	e014      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOD)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a37      	ldr	r2, [pc, #220]	; (8000464 <GPIO_Pin_Setup+0x13c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <GPIO_Pin_Setup+0x130>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_Pin_Setup+0x130>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
 8000398:	e009      	b.n	80003ae <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a32      	ldr	r2, [pc, #200]	; (8000468 <GPIO_Pin_Setup+0x140>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d105      	bne.n	80003ae <GPIO_Pin_Setup+0x86>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <GPIO_Pin_Setup+0x130>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <GPIO_Pin_Setup+0x130>)
 80003a8:	f043 0310 	orr.w	r3, r3, #16
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
	}

	Port -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	78ba      	ldrb	r2, [r7, #2]
 80003b4:	0992      	lsrs	r2, r2, #6
 80003b6:	b2d2      	uxtb	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	78fa      	ldrb	r2, [r7, #3]
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	431a      	orrs	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
	Port -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	78ba      	ldrb	r2, [r7, #2]
 80003ce:	0912      	lsrs	r2, r2, #4
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	f002 0103 	and.w	r1, r2, #3
 80003d6:	78fa      	ldrb	r2, [r7, #3]
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	78ba      	ldrb	r2, [r7, #2]
 80003e8:	0892      	lsrs	r2, r2, #2
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	f002 0103 	and.w	r1, r2, #3
 80003f0:	78fa      	ldrb	r2, [r7, #3]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	609a      	str	r2, [r3, #8]
	Port -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	78ba      	ldrb	r2, [r7, #2]
 8000404:	f002 0103 	and.w	r1, r2, #3
 8000408:	78fa      	ldrb	r2, [r7, #3]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	60da      	str	r2, [r3, #12]

	if(pin < 8)Port -> AFR[0] |= ( alternate_function << (4 * (pin)));
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	2b07      	cmp	r3, #7
 800041a:	d80a      	bhi.n	8000432 <GPIO_Pin_Setup+0x10a>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	7879      	ldrb	r1, [r7, #1]
 8000422:	78fa      	ldrb	r2, [r7, #3]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	621a      	str	r2, [r3, #32]
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));

	if (alternate_function == NONE) {}
}
 8000430:	e00a      	b.n	8000448 <GPIO_Pin_Setup+0x120>
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000436:	7879      	ldrb	r1, [r7, #1]
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	3a08      	subs	r2, #8
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40020000 	.word	0x40020000
 8000458:	40023800 	.word	0x40023800
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800
 8000464:	40020c00 	.word	0x40020c00
 8000468:	40021000 	.word	0x40021000

0800046c <GPIO_Pin_High>:

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	Port -> BSRR |= 1 << pin;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	2101      	movs	r1, #1
 800047c:	683a      	ldr	r2, [r7, #0]
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	619a      	str	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
	Port -> BSRR |= GPIO_BSRR_BR0 << pin;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	699a      	ldr	r2, [r3, #24]
 80004a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	431a      	orrs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	619a      	str	r2, [r3, #24]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <SPI_Init>:
 */

#include "SPI.h"

void SPI_Init(SPI_Config SPI)
{
 80004c0:	b084      	sub	sp, #16
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	f107 0c08 	add.w	ip, r7, #8
 80004ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (SPI.SPI == SPI1)   //CK -> PA5 	//MISO -> PA6 	//MOSI -> PA7
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	4aa2      	ldr	r2, [pc, #648]	; (800075c <SPI_Init+0x29c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d117      	bne.n	8000506 <SPI_Init+0x46>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80004d6:	4ba2      	ldr	r3, [pc, #648]	; (8000760 <SPI_Init+0x2a0>)
 80004d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004da:	4aa1      	ldr	r2, [pc, #644]	; (8000760 <SPI_Init+0x2a0>)
 80004dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e0:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_CLK);
 80004e2:	2305      	movs	r3, #5
 80004e4:	228c      	movs	r2, #140	; 0x8c
 80004e6:	2105      	movs	r1, #5
 80004e8:	489e      	ldr	r0, [pc, #632]	; (8000764 <SPI_Init+0x2a4>)
 80004ea:	f7ff ff1d 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 6, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MISO);
 80004ee:	2305      	movs	r3, #5
 80004f0:	228c      	movs	r2, #140	; 0x8c
 80004f2:	2106      	movs	r1, #6
 80004f4:	489b      	ldr	r0, [pc, #620]	; (8000764 <SPI_Init+0x2a4>)
 80004f6:	f7ff ff17 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 7, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, SPI1_MOSI);
 80004fa:	2305      	movs	r3, #5
 80004fc:	228c      	movs	r2, #140	; 0x8c
 80004fe:	2107      	movs	r1, #7
 8000500:	4898      	ldr	r0, [pc, #608]	; (8000764 <SPI_Init+0x2a4>)
 8000502:	f7ff ff11 	bl	8000328 <GPIO_Pin_Setup>

	}
	if(SPI.SPI == SPI2)	//CK -> PB10 	//MISO -> PB14 	//MOSI -> PB15
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a97      	ldr	r2, [pc, #604]	; (8000768 <SPI_Init+0x2a8>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d117      	bne.n	800053e <SPI_Init+0x7e>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800050e:	4b94      	ldr	r3, [pc, #592]	; (8000760 <SPI_Init+0x2a0>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000512:	4a93      	ldr	r2, [pc, #588]	; (8000760 <SPI_Init+0x2a0>)
 8000514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000518:	6413      	str	r3, [r2, #64]	; 0x40
        GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 800051a:	2305      	movs	r3, #5
 800051c:	228c      	movs	r2, #140	; 0x8c
 800051e:	210a      	movs	r1, #10
 8000520:	4892      	ldr	r0, [pc, #584]	; (800076c <SPI_Init+0x2ac>)
 8000522:	f7ff ff01 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 14, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8000526:	2305      	movs	r3, #5
 8000528:	228c      	movs	r2, #140	; 0x8c
 800052a:	210e      	movs	r1, #14
 800052c:	488f      	ldr	r0, [pc, #572]	; (800076c <SPI_Init+0x2ac>)
 800052e:	f7ff fefb 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 15, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8000532:	2305      	movs	r3, #5
 8000534:	228c      	movs	r2, #140	; 0x8c
 8000536:	210f      	movs	r1, #15
 8000538:	488c      	ldr	r0, [pc, #560]	; (800076c <SPI_Init+0x2ac>)
 800053a:	f7ff fef5 	bl	8000328 <GPIO_Pin_Setup>
	}
	if(SPI.SPI == SPI3)	//CK -> PB12 	//MISO -> PB4 	//MOSI -> PB5
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a8b      	ldr	r2, [pc, #556]	; (8000770 <SPI_Init+0x2b0>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d117      	bne.n	8000576 <SPI_Init+0xb6>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000546:	4b86      	ldr	r3, [pc, #536]	; (8000760 <SPI_Init+0x2a0>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054a:	4a85      	ldr	r2, [pc, #532]	; (8000760 <SPI_Init+0x2a0>)
 800054c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000550:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOB, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8000552:	2305      	movs	r3, #5
 8000554:	228c      	movs	r2, #140	; 0x8c
 8000556:	210c      	movs	r1, #12
 8000558:	4884      	ldr	r0, [pc, #528]	; (800076c <SPI_Init+0x2ac>)
 800055a:	f7ff fee5 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 800055e:	2305      	movs	r3, #5
 8000560:	228c      	movs	r2, #140	; 0x8c
 8000562:	2104      	movs	r1, #4
 8000564:	4881      	ldr	r0, [pc, #516]	; (800076c <SPI_Init+0x2ac>)
 8000566:	f7ff fedf 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 5, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 800056a:	2305      	movs	r3, #5
 800056c:	228c      	movs	r2, #140	; 0x8c
 800056e:	2105      	movs	r1, #5
 8000570:	487e      	ldr	r0, [pc, #504]	; (800076c <SPI_Init+0x2ac>)
 8000572:	f7ff fed9 	bl	8000328 <GPIO_Pin_Setup>
	}
	if(SPI.SPI == SPI4)	//CK -> PB13 	//MISO -> PA11 	//MOSI -> PA1
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	4a7e      	ldr	r2, [pc, #504]	; (8000774 <SPI_Init+0x2b4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d117      	bne.n	80005ae <SPI_Init+0xee>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 800057e:	4b78      	ldr	r3, [pc, #480]	; (8000760 <SPI_Init+0x2a0>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	4a77      	ldr	r2, [pc, #476]	; (8000760 <SPI_Init+0x2a0>)
 8000584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000588:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOB, 13, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 800058a:	2305      	movs	r3, #5
 800058c:	228c      	movs	r2, #140	; 0x8c
 800058e:	210d      	movs	r1, #13
 8000590:	4876      	ldr	r0, [pc, #472]	; (800076c <SPI_Init+0x2ac>)
 8000592:	f7ff fec9 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 8000596:	2305      	movs	r3, #5
 8000598:	228c      	movs	r2, #140	; 0x8c
 800059a:	210c      	movs	r1, #12
 800059c:	4873      	ldr	r0, [pc, #460]	; (800076c <SPI_Init+0x2ac>)
 800059e:	f7ff fec3 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 1, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80005a2:	2305      	movs	r3, #5
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	2101      	movs	r1, #1
 80005a8:	486e      	ldr	r0, [pc, #440]	; (8000764 <SPI_Init+0x2a4>)
 80005aa:	f7ff febd 	bl	8000328 <GPIO_Pin_Setup>
	}
	if(SPI.SPI == SPI5)	//CK -> PB0 	//MISO -> PA12 	//MOSI -> PB8
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a71      	ldr	r2, [pc, #452]	; (8000778 <SPI_Init+0x2b8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d117      	bne.n	80005e6 <SPI_Init+0x126>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 80005b6:	4b6a      	ldr	r3, [pc, #424]	; (8000760 <SPI_Init+0x2a0>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	4a69      	ldr	r2, [pc, #420]	; (8000760 <SPI_Init+0x2a0>)
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOB, 0, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80005c2:	2305      	movs	r3, #5
 80005c4:	228c      	movs	r2, #140	; 0x8c
 80005c6:	2100      	movs	r1, #0
 80005c8:	4868      	ldr	r0, [pc, #416]	; (800076c <SPI_Init+0x2ac>)
 80005ca:	f7ff fead 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOB, 8, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80005ce:	2305      	movs	r3, #5
 80005d0:	228c      	movs	r2, #140	; 0x8c
 80005d2:	2108      	movs	r1, #8
 80005d4:	4865      	ldr	r0, [pc, #404]	; (800076c <SPI_Init+0x2ac>)
 80005d6:	f7ff fea7 	bl	8000328 <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, 5);
 80005da:	2305      	movs	r3, #5
 80005dc:	228c      	movs	r2, #140	; 0x8c
 80005de:	210c      	movs	r1, #12
 80005e0:	4860      	ldr	r0, [pc, #384]	; (8000764 <SPI_Init+0x2a4>)
 80005e2:	f7ff fea1 	bl	8000328 <GPIO_Pin_Setup>
	}

	SPI.SPI -> CR1 &= ~SPI_CR1_SPE;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80005f0:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.phase << 0;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	7d3b      	ldrb	r3, [r7, #20]
 80005f8:	4619      	mov	r1, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	430a      	orrs	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.polarity << 1;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	7d7b      	ldrb	r3, [r7, #21]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4619      	mov	r1, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	430a      	orrs	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.mode  << 2;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	7b7b      	ldrb	r3, [r7, #13]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4619      	mov	r1, r3
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.frequency << 3;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4619      	mov	r1, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	430a      	orrs	r2, r1
 800062e:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.Frame << 11;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	7ebb      	ldrb	r3, [r7, #26]
 8000636:	02db      	lsls	r3, r3, #11
 8000638:	4619      	mov	r1, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	430a      	orrs	r2, r1
 800063e:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.CRC_Enable << 13;
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	035b      	lsls	r3, r3, #13
 8000648:	4619      	mov	r1, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	430a      	orrs	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
	SPI.SPI -> CR1 |= SPI.LSB_MSB << 7;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	7dbb      	ldrb	r3, [r7, #22]
 8000656:	01db      	lsls	r3, r3, #7
 8000658:	4619      	mov	r1, r3
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]

	SPI.SPI -> CR1 &= ~SPI_CR1_SSM;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800066a:	601a      	str	r2, [r3, #0]

	SPI.SPI -> CR2 |= SPI.DMA_TX << 1 | SPI.DMA_RX << 0 | SPI_CR2_SSOE ;
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	7e3a      	ldrb	r2, [r7, #24]
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	7e79      	ldrb	r1, [r7, #25]
 8000676:	430a      	orrs	r2, r1
 8000678:	431a      	orrs	r2, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	f042 0204 	orr.w	r2, r2, #4
 8000680:	605a      	str	r2, [r3, #4]

	if(SPI.mode == SPI_Master)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d130      	bne.n	80006ea <SPI_Init+0x22a>
	{
		SPI.SPI -> CR1 |= SPI_CR1_MSTR;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f042 0204 	orr.w	r2, r2, #4
 8000692:	601a      	str	r2, [r3, #0]
		switch (SPI.type)
 8000694:	7b3b      	ldrb	r3, [r7, #12]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d01a      	beq.n	80006d0 <SPI_Init+0x210>
 800069a:	2b02      	cmp	r3, #2
 800069c:	dc27      	bgt.n	80006ee <SPI_Init+0x22e>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <SPI_Init+0x1e8>
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d007      	beq.n	80006b6 <SPI_Init+0x1f6>
			case SPI_Half_Duplex_Master_RX:
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
				break;
			default:
				break;
 80006a6:	e022      	b.n	80006ee <SPI_Init+0x22e>
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80006b2:	601a      	str	r2, [r3, #0]
				break;
 80006b4:	e01c      	b.n	80006f0 <SPI_Init+0x230>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006c0:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006cc:	601a      	str	r2, [r3, #0]
				break;
 80006ce:	e00f      	b.n	80006f0 <SPI_Init+0x230>
				SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80006da:	601a      	str	r2, [r3, #0]
				SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80006e6:	601a      	str	r2, [r3, #0]
				break;
 80006e8:	e002      	b.n	80006f0 <SPI_Init+0x230>
		}
	}
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <SPI_Init+0x230>
				break;
 80006ee:	bf00      	nop

	if(SPI.mode == SPI_Slave)
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d130      	bne.n	8000758 <SPI_Init+0x298>
	{
	SPI.SPI -> CR1 &= ~SPI_CR1_MSTR;
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	f022 0204 	bic.w	r2, r2, #4
 8000700:	601a      	str	r2, [r3, #0]
	switch (SPI.type)
 8000702:	7b3b      	ldrb	r3, [r7, #12]
 8000704:	2b05      	cmp	r3, #5
 8000706:	d01a      	beq.n	800073e <SPI_Init+0x27e>
 8000708:	2b05      	cmp	r3, #5
 800070a:	dc37      	bgt.n	800077c <SPI_Init+0x2bc>
 800070c:	2b03      	cmp	r3, #3
 800070e:	d002      	beq.n	8000716 <SPI_Init+0x256>
 8000710:	2b04      	cmp	r3, #4
 8000712:	d007      	beq.n	8000724 <SPI_Init+0x264>
		case SPI_Half_Duplex_Slave_RX:
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
			break;
		default:
			break;
 8000714:	e032      	b.n	800077c <SPI_Init+0x2bc>
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000720:	601a      	str	r2, [r3, #0]
			break;
 8000722:	e02c      	b.n	800077e <SPI_Init+0x2be>
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800072e:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 |= SPI_CR1_BIDIOE;
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800073a:	601a      	str	r2, [r3, #0]
			break;
 800073c:	e01f      	b.n	800077e <SPI_Init+0x2be>
			SPI.SPI -> CR1 |= SPI_CR1_BIDIMODE;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000748:	601a      	str	r2, [r3, #0]
			SPI.SPI -> CR1 &= ~SPI_CR1_BIDIOE;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000754:	601a      	str	r2, [r3, #0]
			break;
 8000756:	e012      	b.n	800077e <SPI_Init+0x2be>
	 }
	}
 8000758:	bf00      	nop
 800075a:	e010      	b.n	800077e <SPI_Init+0x2be>
 800075c:	40013000 	.word	0x40013000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000
 8000768:	40003800 	.word	0x40003800
 800076c:	40020400 	.word	0x40020400
 8000770:	40003c00 	.word	0x40003c00
 8000774:	40013400 	.word	0x40013400
 8000778:	40015000 	.word	0x40015000
			break;
 800077c:	bf00      	nop

	SPI.SPI -> CR1 |= SPI_CR1_SPE;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000788:	601a      	str	r2, [r3, #0]

	GPIO_Pin_Setup(SPI.nCSS_Port, SPI.nCSS_pin, GENERAL_PURPOSE_OUTPUT_PUSHPULL, NONE);
 800078a:	69f8      	ldr	r0, [r7, #28]
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	b2d9      	uxtb	r1, r3
 8000790:	2300      	movs	r3, #0
 8000792:	224c      	movs	r2, #76	; 0x4c
 8000794:	f7ff fdc8 	bl	8000328 <GPIO_Pin_Setup>

}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr

080007a4 <SPI_CSS_Low>:


void SPI_CSS_Low(SPI_Config SPI)
{
 80007a4:	b084      	sub	sp, #16
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	f107 0c08 	add.w	ip, r7, #8
 80007ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_Low(SPI.nCSS_Port, SPI.nCSS_pin);
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fe6b 	bl	8000494 <GPIO_Pin_Low>
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c6:	b004      	add	sp, #16
 80007c8:	4770      	bx	lr

080007ca <SPI_CSS_High>:


void SPI_CSS_High(SPI_Config SPI)
{
 80007ca:	b084      	sub	sp, #16
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	f107 0c08 	add.w	ip, r7, #8
 80007d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_Pin_High(SPI.nCSS_Port, SPI.nCSS_pin);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	6a3a      	ldr	r2, [r7, #32]
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe44 	bl	800046c <GPIO_Pin_High>
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ec:	b004      	add	sp, #16
 80007ee:	4770      	bx	lr

080007f0 <SPI_Send_Data>:


void SPI_Send_Data(SPI_Config SPI, int data)
{
 80007f0:	b084      	sub	sp, #16
 80007f2:	b490      	push	{r4, r7}
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	f107 0408 	add.w	r4, r7, #8
 80007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	while(!(SPI.SPI->SR & SPI_SR_TXE));
 80007fe:	bf00      	nop
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f9      	beq.n	8000800 <SPI_Send_Data+0x10>
	SPI.SPI -> DR = data;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000810:	60da      	str	r2, [r3, #12]
	while(!(SPI.SPI->SR & SPI_SR_TXE));
 8000812:	bf00      	nop
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f9      	beq.n	8000814 <SPI_Send_Data+0x24>
//	while(!(SPI.SPI->SR & SPI_SR_TXE));
	while((SPI.SPI->SR & SPI_SR_BSY));
 8000820:	bf00      	nop
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f9      	bne.n	8000822 <SPI_Send_Data+0x32>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc90      	pop	{r4, r7}
 8000836:	b004      	add	sp, #16
 8000838:	4770      	bx	lr

0800083a <SPI_Receive_Data>:

int SPI_Receive_Data(SPI_Config SPI)
{
 800083a:	b084      	sub	sp, #16
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b087      	sub	sp, #28
 8000840:	af04      	add	r7, sp, #16
 8000842:	f107 0418 	add.w	r4, r7, #24
 8000846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int data1,data2 = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
	int temp = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
	if(SPI.Frame == SPI_Frame_8Bit)
 8000852:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11e      	bne.n	8000898 <SPI_Receive_Data+0x5e>
	{
		SPI_Send_Data(SPI, 0xFF); //Send dummy byte
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	9303      	str	r3, [sp, #12]
 800085e:	466c      	mov	r4, sp
 8000860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000864:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000872:	f7ff ffbd 	bl	80007f0 <SPI_Send_Data>
		while((SPI.SPI->SR & SPI_SR_BSY));
 8000876:	bf00      	nop
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f9      	bne.n	8000878 <SPI_Receive_Data+0x3e>
 		while((SPI.SPI -> SR & SPI_SR_RXNE))
 8000884:	e002      	b.n	800088c <SPI_Receive_Data+0x52>
		temp = (SPI.SPI -> DR);
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	607b      	str	r3, [r7, #4]
 		while((SPI.SPI -> SR & SPI_SR_RXNE))
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f6      	bne.n	8000886 <SPI_Receive_Data+0x4c>
	}
	if(SPI.Frame == SPI_Frame_16Bit)
 8000898:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800089c:	2b01      	cmp	r3, #1
 800089e:	d118      	bne.n	80008d2 <SPI_Receive_Data+0x98>
	{
		SPI_Send_Data(SPI, 0xAAAA); //Send dummy byte
 80008a0:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	466c      	mov	r4, sp
 80008a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ba:	f7ff ff99 	bl	80007f0 <SPI_Send_Data>
		while((SPI.SPI->SR & SPI_SR_BSY));
 80008be:	bf00      	nop
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f9      	bne.n	80008c0 <SPI_Receive_Data+0x86>
//		while((SPI.SPI -> SR & SPI_SR_RXNE))
		temp = SPI.SPI -> DR;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	607b      	str	r3, [r7, #4]
	}

return temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80008de:	b004      	add	sp, #16
 80008e0:	4770      	bx	lr
	...

080008e4 <Delay_us>:
	return (0UL);                                                     /* Function successful */
}


__STATIC_INLINE uint32_t Delay_us(float us)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = (SystemCoreClock / 1000000) * us;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <Delay_us+0x54>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <Delay_us+0x58>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000902:	edd7 7a01 	vldr	s15, [r7, #4]
 8000906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <Delay_us+0x5c>)
 800090c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000910:	ee17 2a90 	vmov	r2, s15
 8000914:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <Delay_us+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 800091c:	bf00      	nop
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <Delay_us+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f9      	beq.n	800091e <Delay_us+0x3a>
	return (0UL);                                                     /* Function successful */
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20000000 	.word	0x20000000
 800093c:	431bde83 	.word	0x431bde83
 8000940:	e000e010 	.word	0xe000e010

08000944 <W25Qx_Read_SR1>:




uint8_t W25Qx_Read_SR1(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b087      	sub	sp, #28
 8000948:	af04      	add	r7, sp, #16
	uint8_t SR1[2];
	SPI_CSS_Low(W25Q);
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <W25Qx_Read_SR1+0x84>)
 800094c:	466c      	mov	r4, sp
 800094e:	f103 0210 	add.w	r2, r3, #16
 8000952:	ca07      	ldmia	r2, {r0, r1, r2}
 8000954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095a:	f7ff ff23 	bl	80007a4 <SPI_CSS_Low>
	SPI_Send_Data(W25Q, 0x05); //SR1
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <W25Qx_Read_SR1+0x84>)
 8000960:	2205      	movs	r2, #5
 8000962:	9203      	str	r2, [sp, #12]
 8000964:	466c      	mov	r4, sp
 8000966:	f103 0210 	add.w	r2, r3, #16
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000972:	f7ff ff3d 	bl	80007f0 <SPI_Send_Data>
	SR1[0] = SPI_Receive_Data(W25Q);
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <W25Qx_Read_SR1+0x84>)
 8000978:	466c      	mov	r4, sp
 800097a:	f103 0210 	add.w	r2, r3, #16
 800097e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000986:	f7ff ff58 	bl	800083a <SPI_Receive_Data>
 800098a:	4603      	mov	r3, r0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	713b      	strb	r3, [r7, #4]
	SR1[1] = SPI_Receive_Data(W25Q);
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <W25Qx_Read_SR1+0x84>)
 8000992:	466c      	mov	r4, sp
 8000994:	f103 0210 	add.w	r2, r3, #16
 8000998:	ca07      	ldmia	r2, {r0, r1, r2}
 800099a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800099e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a0:	f7ff ff4b 	bl	800083a <SPI_Receive_Data>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	717b      	strb	r3, [r7, #5]
	SPI_CSS_High(W25Q);
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <W25Qx_Read_SR1+0x84>)
 80009ac:	466c      	mov	r4, sp
 80009ae:	f103 0210 	add.w	r2, r3, #16
 80009b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ba:	f7ff ff06 	bl	80007ca <SPI_CSS_High>
	return SR1[1];
 80009be:	797b      	ldrb	r3, [r7, #5]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	20000020 	.word	0x20000020

080009cc <W25Qx_Read_Busy_Bit>:
	return SR2[1];
}


 static uint8_t W25Qx_Read_Busy_Bit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	 uint8_t a,b;
	 a = W25Qx_Read_SR1();
 80009d2:	f7ff ffb7 	bl	8000944 <W25Qx_Read_SR1>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	 b = ((0x01 & a) >> 0);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	71bb      	strb	r3, [r7, #6]
	 if(b == 1)
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d101      	bne.n	80009ec <W25Qx_Read_Busy_Bit+0x20>
	 {
		 return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <W25Qx_Read_Busy_Bit+0x22>
	 }
	 else{
		 return 0;
 80009ec:	2300      	movs	r3, #0
	 }
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <W25Qx_Flash_Write_Enable>:
	 return a;
}


 static void W25Qx_Flash_Write_Enable()
 {
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af04      	add	r7, sp, #16
//	 do{
 	SPI_CSS_Low(W25Q);
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <W25Qx_Flash_Write_Enable+0x5c>)
 8000a00:	466c      	mov	r4, sp
 8000a02:	f103 0210 	add.w	r2, r3, #16
 8000a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a0e:	f7ff fec9 	bl	80007a4 <SPI_CSS_Low>
 	SPI_Send_Data(W25Q, 0x06); //Write Enable
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <W25Qx_Flash_Write_Enable+0x5c>)
 8000a14:	2206      	movs	r2, #6
 8000a16:	9203      	str	r2, [sp, #12]
 8000a18:	466c      	mov	r4, sp
 8000a1a:	f103 0210 	add.w	r2, r3, #16
 8000a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a26:	f7ff fee3 	bl	80007f0 <SPI_Send_Data>
 	SPI_CSS_High(W25Q);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <W25Qx_Flash_Write_Enable+0x5c>)
 8000a2c:	466c      	mov	r4, sp
 8000a2e:	f103 0210 	add.w	r2, r3, #16
 8000a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3a:	f7ff fec6 	bl	80007ca <SPI_CSS_High>
//	 }
// 	while(W25Qx_Read_Write_Enable_Latch() == 0);
Delay_us(50);
 8000a3e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000a58 <W25Qx_Flash_Write_Enable+0x60>
 8000a42:	f7ff ff4f 	bl	80008e4 <Delay_us>

W25Qx_Read_SR1();
 8000a46:	f7ff ff7d 	bl	8000944 <W25Qx_Read_SR1>

 }
 8000a4a:	bf00      	nop
 8000a4c:	3704      	adds	r7, #4
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000020 	.word	0x20000020
 8000a58:	42480000 	.word	0x42480000

08000a5c <W25Qx_Write_SR1>:
 	SPI_CSS_High(W25Q);
 	while(W25Qx_Read_Write_Enable_Latch() == 1){}
 }

 static void W25Qx_Write_SR1(uint8_t data)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	 W25Qx_Flash_Write_Enable();
 8000a66:	f7ff ffc7 	bl	80009f8 <W25Qx_Flash_Write_Enable>

	 	SPI_CSS_Low(W25Q);
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <W25Qx_Write_SR1+0x70>)
 8000a6c:	466c      	mov	r4, sp
 8000a6e:	f103 0210 	add.w	r2, r3, #16
 8000a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7a:	f7ff fe93 	bl	80007a4 <SPI_CSS_Low>
	 	SPI_Send_Data(W25Q, Write_Status_Register); //Write SR volatile
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <W25Qx_Write_SR1+0x70>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	9203      	str	r2, [sp, #12]
 8000a84:	466c      	mov	r4, sp
 8000a86:	f103 0210 	add.w	r2, r3, #16
 8000a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	f7ff fead 	bl	80007f0 <SPI_Send_Data>
//	 	SPI_CSS_High(W25Q);

//	 	SPI_CSS_Low(W25Q);
	 	SPI_Send_Data(W25Q, data); //Write SR volatile
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <W25Qx_Write_SR1+0x70>)
 8000a9a:	9203      	str	r2, [sp, #12]
 8000a9c:	466c      	mov	r4, sp
 8000a9e:	f103 0210 	add.w	r2, r3, #16
 8000aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aaa:	f7ff fea1 	bl	80007f0 <SPI_Send_Data>
//	 	SPI_Send_Data(W25Q, data); //Write SR volatile
	 	SPI_CSS_High(W25Q);
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <W25Qx_Write_SR1+0x70>)
 8000ab0:	466c      	mov	r4, sp
 8000ab2:	f103 0210 	add.w	r2, r3, #16
 8000ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abe:	f7ff fe84 	bl	80007ca <SPI_CSS_High>

//	 	W25Qx_Flash_Write_Disable();
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000020 	.word	0x20000020

08000ad0 <W25Qx_Init>:

//******************************************** End **************************************************************


void W25Qx_Init(SPI_TypeDef *SPI)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	6078      	str	r0, [r7, #4]
	W25Q.SPI = SPI1;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <W25Qx_Init+0xa0>)
 8000ada:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <W25Qx_Init+0xa4>)
 8000adc:	601a      	str	r2, [r3, #0]
	W25Q.Frame = SPI_Frame_8Bit;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <W25Qx_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	749a      	strb	r2, [r3, #18]
	W25Q.phase = 1;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <W25Qx_Init+0xa0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	731a      	strb	r2, [r3, #12]
	W25Q.polarity = 1;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <W25Qx_Init+0xa0>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	735a      	strb	r2, [r3, #13]
	W25Q.frequency = 3;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <W25Qx_Init+0xa0>)
 8000af2:	2203      	movs	r2, #3
 8000af4:	609a      	str	r2, [r3, #8]
	W25Q.mode = SPI_Master;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <W25Qx_Init+0xa0>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	715a      	strb	r2, [r3, #5]
	W25Q.type = SPI_Full_Duplex_Master;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <W25Qx_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	711a      	strb	r2, [r3, #4]
	W25Q.nCSS_Port = GPIOA;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <W25Qx_Init+0xa8>)
 8000b06:	615a      	str	r2, [r3, #20]
	W25Q.nCSS_pin = 4;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	619a      	str	r2, [r3, #24]
	SPI_Init(W25Q);
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b10:	466c      	mov	r4, sp
 8000b12:	f103 0210 	add.w	r2, r3, #16
 8000b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1e:	f7ff fccf 	bl	80004c0 <SPI_Init>

	W25Qx_Write_SR1(0x00);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff9a 	bl	8000a5c <W25Qx_Write_SR1>

	SPI_CSS_Low(W25Q);
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b2a:	466c      	mov	r4, sp
 8000b2c:	f103 0210 	add.w	r2, r3, #16
 8000b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b38:	f7ff fe34 	bl	80007a4 <SPI_CSS_Low>
	SPI_Send_Data(W25Q, 0xAB);
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b3e:	22ab      	movs	r2, #171	; 0xab
 8000b40:	9203      	str	r2, [sp, #12]
 8000b42:	466c      	mov	r4, sp
 8000b44:	f103 0210 	add.w	r2, r3, #16
 8000b48:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b50:	f7ff fe4e 	bl	80007f0 <SPI_Send_Data>
	SPI_CSS_High(W25Q);
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <W25Qx_Init+0xa0>)
 8000b56:	466c      	mov	r4, sp
 8000b58:	f103 0210 	add.w	r2, r3, #16
 8000b5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b64:	f7ff fe31 	bl	80007ca <SPI_CSS_High>


}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	20000020 	.word	0x20000020
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40020000 	.word	0x40020000

08000b7c <W25Qx_Chip_Erase>:
	SPI_Send_Data(W25Q, 0x99); //SOFTWARE RESET
	SPI_CSS_High(W25Q);
}

void W25Qx_Chip_Erase()
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af04      	add	r7, sp, #16
	SPI_CSS_Low(W25Q);
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <W25Qx_Chip_Erase+0x50>)
 8000b84:	466c      	mov	r4, sp
 8000b86:	f103 0210 	add.w	r2, r3, #16
 8000b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b92:	f7ff fe07 	bl	80007a4 <SPI_CSS_Low>
	SPI_Send_Data(W25Q, 0x60);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <W25Qx_Chip_Erase+0x50>)
 8000b98:	2260      	movs	r2, #96	; 0x60
 8000b9a:	9203      	str	r2, [sp, #12]
 8000b9c:	466c      	mov	r4, sp
 8000b9e:	f103 0210 	add.w	r2, r3, #16
 8000ba2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000baa:	f7ff fe21 	bl	80007f0 <SPI_Send_Data>
	SPI_CSS_High(W25Q);
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <W25Qx_Chip_Erase+0x50>)
 8000bb0:	466c      	mov	r4, sp
 8000bb2:	f103 0210 	add.w	r2, r3, #16
 8000bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	f7ff fe04 	bl	80007ca <SPI_CSS_High>


}
 8000bc2:	bf00      	nop
 8000bc4:	3704      	adds	r7, #4
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000020 	.word	0x20000020

08000bd0 <W25Qx_Write_Flash_Buffer>:
	W25Qx_Flash_Write_Disable();

}

void W25Qx_Write_Flash_Buffer(uint32_t addr, int len, uint8_t *data)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
//		SPI_Send_Data(W25Q, 0x00);
//	}
//	SPI_CSS_High(W25Q);
//	while(W25Qx_Read_Busy_Bit() == 1);
//	Delay_us(50);
	W25Qx_Flash_Write_Enable(); //write enable
 8000bdc:	f7ff ff0c 	bl	80009f8 <W25Qx_Flash_Write_Enable>
	SPI_CSS_Low(W25Q); //
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000be2:	466c      	mov	r4, sp
 8000be4:	f103 0210 	add.w	r2, r3, #16
 8000be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf0:	f7ff fdd8 	bl	80007a4 <SPI_CSS_Low>
	SPI_Send_Data(W25Q, 0x02); //PAGE PROGRAM
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	9203      	str	r2, [sp, #12]
 8000bfa:	466c      	mov	r4, sp
 8000bfc:	f103 0210 	add.w	r2, r3, #16
 8000c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c08:	f7ff fdf2 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF0000) >> 16));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000c14:	9203      	str	r2, [sp, #12]
 8000c16:	466c      	mov	r4, sp
 8000c18:	f103 0210 	add.w	r2, r3, #16
 8000c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c24:	f7ff fde4 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF00) >> 8));
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000c30:	9203      	str	r2, [sp, #12]
 8000c32:	466c      	mov	r4, sp
 8000c34:	f103 0210 	add.w	r2, r3, #16
 8000c38:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c40:	f7ff fdd6 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF)));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000c4a:	9203      	str	r2, [sp, #12]
 8000c4c:	466c      	mov	r4, sp
 8000c4e:	f103 0210 	add.w	r2, r3, #16
 8000c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5a:	f7ff fdc9 	bl	80007f0 <SPI_Send_Data>
//	for(int i = 0; i < len; i++)
//	{
//		SPI_Send_Data(W25Q, 0x00);
//	}
	for(int i = 0; i < len; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e012      	b.n	8000c8a <W25Qx_Write_Flash_Buffer+0xba>
	{
		SPI_Send_Data(W25Q, data[i]);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000c70:	9203      	str	r2, [sp, #12]
 8000c72:	466c      	mov	r4, sp
 8000c74:	f103 0210 	add.w	r2, r3, #16
 8000c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c80:	f7ff fdb6 	bl	80007f0 <SPI_Send_Data>
	for(int i = 0; i < len; i++)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbe8      	blt.n	8000c64 <W25Qx_Write_Flash_Buffer+0x94>
	}
	SPI_CSS_High(W25Q);
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <W25Qx_Write_Flash_Buffer+0xe0>)
 8000c94:	466c      	mov	r4, sp
 8000c96:	f103 0210 	add.w	r2, r3, #16
 8000c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca2:	f7ff fd92 	bl	80007ca <SPI_CSS_High>
}
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000020 	.word	0x20000020

08000cb4 <W25Qx_Read_Flash_Buffer>:
	return x[1];
}


void W25Qx_Read_Flash_Buffer(uint32_t addr, int len, uint8_t *data)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	while(W25Qx_Read_Busy_Bit() == 1);
 8000cc0:	bf00      	nop
 8000cc2:	f7ff fe83 	bl	80009cc <W25Qx_Read_Busy_Bit>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d0fa      	beq.n	8000cc2 <W25Qx_Read_Flash_Buffer+0xe>
	SPI_CSS_Low(W25Q);
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000cce:	466c      	mov	r4, sp
 8000cd0:	f103 0210 	add.w	r2, r3, #16
 8000cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cdc:	f7ff fd62 	bl	80007a4 <SPI_CSS_Low>
	SPI_Send_Data(W25Q, 0x03);
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	9203      	str	r2, [sp, #12]
 8000ce6:	466c      	mov	r4, sp
 8000ce8:	f103 0210 	add.w	r2, r3, #16
 8000cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	f7ff fd7c 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF0000) >> 16));
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000d00:	9203      	str	r2, [sp, #12]
 8000d02:	466c      	mov	r4, sp
 8000d04:	f103 0210 	add.w	r2, r3, #16
 8000d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d10:	f7ff fd6e 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF00) >> 8));
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000d1c:	9203      	str	r2, [sp, #12]
 8000d1e:	466c      	mov	r4, sp
 8000d20:	f103 0210 	add.w	r2, r3, #16
 8000d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2c:	f7ff fd60 	bl	80007f0 <SPI_Send_Data>
	SPI_Send_Data(W25Q,((addr & 0xFF)));
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000d36:	9203      	str	r2, [sp, #12]
 8000d38:	466c      	mov	r4, sp
 8000d3a:	f103 0210 	add.w	r2, r3, #16
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d46:	f7ff fd53 	bl	80007f0 <SPI_Send_Data>
	for(int i = 0; i < len; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e012      	b.n	8000d76 <W25Qx_Read_Flash_Buffer+0xc2>
	{
		data[i] = SPI_Receive_Data(W25Q);
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000d52:	466c      	mov	r4, sp
 8000d54:	f103 0210 	add.w	r2, r3, #16
 8000d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	f7ff fd6b 	bl	800083a <SPI_Receive_Data>
 8000d64:	4601      	mov	r1, r0
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b2ca      	uxtb	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbe8      	blt.n	8000d50 <W25Qx_Read_Flash_Buffer+0x9c>
	}
	SPI_CSS_High(W25Q);
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <W25Qx_Read_Flash_Buffer+0xf0>)
 8000d80:	466c      	mov	r4, sp
 8000d82:	f103 0210 	add.w	r2, r3, #16
 8000d86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8e:	f7ff fd1c 	bl	80007ca <SPI_CSS_High>
	Delay_us(50);
 8000d92:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000da8 <W25Qx_Read_Flash_Buffer+0xf4>
 8000d96:	f7ff fda5 	bl	80008e4 <Delay_us>
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000020 	.word	0x20000020
 8000da8:	42480000 	.word	0x42480000

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ffc2 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <MCU_Clock_Setup>:
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	SystemInit();
 8000e4a:	f000 f901 	bl	8001050 <SystemInit>
	uint8_t pll_m = 25;
 8000e4e:	2319      	movs	r3, #25
 8000e50:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 192; //192
 8000e52:	23c0      	movs	r3, #192	; 0xc0
 8000e54:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8000e70:	bf00      	nop
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <MCU_Clock_Setup+0x2e>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8000e7e:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <MCU_Clock_Setup+0x10c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a30      	ldr	r2, [pc, #192]	; (8000f50 <MCU_Clock_Setup+0x10c>)
 8000e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e94:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <MCU_Clock_Setup+0x110>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <MCU_Clock_Setup+0x110>)
 8000e9c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ea0:	f043 0303 	orr.w	r3, r3, #3
 8000ea4:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	793a      	ldrb	r2, [r7, #4]
 8000eac:	0611      	lsls	r1, r2, #24
 8000eae:	797a      	ldrb	r2, [r7, #5]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	4311      	orrs	r1, r2
 8000eb4:	79ba      	ldrb	r2, [r7, #6]
 8000eb6:	0192      	lsls	r2, r2, #6
 8000eb8:	4311      	orrs	r1, r2
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000efa:	bf00      	nop
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f9      	beq.n	8000efc <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000f14:	bf00      	nop
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d1f9      	bne.n	8000f16 <MCU_Clock_Setup+0xd2>
SystemCoreClockUpdate();
 8000f22:	f000 f8ab 	bl	800107c <SystemCoreClockUpdate>
SysTick_Config(SystemCoreClock/1000);
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MCU_Clock_Setup+0x114>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <MCU_Clock_Setup+0x118>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff64 	bl	8000e00 <SysTick_Config>
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <MCU_Clock_Setup+0x108>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f42:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000
 8000f54:	40023c00 	.word	0x40023c00
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	10624dd3 	.word	0x10624dd3

08000f60 <Delay_Config>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <Delay_Config+0x2c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <Delay_Config+0x2c>)
 8000f6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000f70:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <Delay_Config+0x2c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <Delay_Config+0x2c>)
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	unsigned long x = (0x17ed0) * (ms);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <Delay_ms+0x3c>)
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <Delay_ms+0x40>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <Delay_ms+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000fae:	bf00      	nop
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <Delay_ms+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <Delay_ms+0x20>
	return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	00017ed0 	.word	0x00017ed0
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <main>:

#define SPI_Flash_Debug 1


int main(void)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	f2ad 7dd4 	subw	sp, sp, #2004	; 0x7d4
 8000fda:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8000fdc:	f7ff ff32 	bl	8000e44 <MCU_Clock_Setup>
	Delay_Config();
 8000fe0:	f7ff ffbe 	bl	8000f60 <Delay_Config>
#if SPI_Flash_Debug
	Console_Init(USART1, 9600);
 8000fe4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000fe8:	4816      	ldr	r0, [pc, #88]	; (8001044 <main+0x70>)
 8000fea:	f7ff f8f5 	bl	80001d8 <Console_Init>
#endif




W25Qx_Init(SPI1);
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <main+0x74>)
 8000ff0:	f7ff fd6e 	bl	8000ad0 <W25Qx_Init>

W25Qx_Chip_Erase();
 8000ff4:	f7ff fdc2 	bl	8000b7c <W25Qx_Chip_Erase>


uint8_t write[1000] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a};
 8000ff8:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <main+0x78>)
 8000ffe:	4623      	mov	r3, r4
 8001000:	ca07      	ldmia	r2, {r0, r1, r2}
 8001002:	c303      	stmia	r3!, {r0, r1}
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	0c12      	lsrs	r2, r2, #16
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	f104 030b 	add.w	r3, r4, #11
 8001010:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f904 	bl	8001224 <memset>


	for(;;)
	{

		W25Qx_Write_Flash_Buffer(0x000000, 10, write);
 800101c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8001020:	461a      	mov	r2, r3
 8001022:	210a      	movs	r1, #10
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fdd3 	bl	8000bd0 <W25Qx_Write_Flash_Buffer>
		Delay_ms(20);
 800102a:	2014      	movs	r0, #20
 800102c:	f7ff ffb0 	bl	8000f90 <Delay_ms>
		W25Qx_Read_Flash_Buffer(0x000000, 10, flash);
 8001030:	463b      	mov	r3, r7
 8001032:	461a      	mov	r2, r3
 8001034:	210a      	movs	r1, #10
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fe3c 	bl	8000cb4 <W25Qx_Read_Flash_Buffer>
		Delay_ms(100);
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	f7ff ffa7 	bl	8000f90 <Delay_ms>
		W25Qx_Write_Flash_Buffer(0x000000, 10, write);
 8001042:	e7eb      	b.n	800101c <main+0x48>
 8001044:	40011000 	.word	0x40011000
 8001048:	40013000 	.word	0x40013000
 800104c:	0800124c 	.word	0x0800124c

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SystemInit+0x28>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <SystemInit+0x28>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SystemInit+0x28>)
 8001066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106a:	609a      	str	r2, [r3, #8]
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2, plln;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	2302      	movs	r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	2302      	movs	r3, #2
 8001094:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d011      	beq.n	80010ca <SystemCoreClockUpdate+0x4e>
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d84a      	bhi.n	8001142 <SystemCoreClockUpdate+0xc6>
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <SystemCoreClockUpdate+0x3e>
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d004      	beq.n	80010c2 <SystemCoreClockUpdate+0x46>
 80010b8:	e043      	b.n	8001142 <SystemCoreClockUpdate+0xc6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 80010bc:	4a2f      	ldr	r2, [pc, #188]	; (800117c <SystemCoreClockUpdate+0x100>)
 80010be:	601a      	str	r2, [r3, #0]
      break;
 80010c0:	e043      	b.n	800114a <SystemCoreClockUpdate+0xce>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 80010c4:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <SystemCoreClockUpdate+0x104>)
 80010c6:	601a      	str	r2, [r3, #0]
      break;
 80010c8:	e03f      	b.n	800114a <SystemCoreClockUpdate+0xce>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	0d9b      	lsrs	r3, r3, #22
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010de:	607b      	str	r3, [r7, #4]
      plln = RCC->PLLCFGR & RCC_PLLCFGR_PLLN;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010e8:	4013      	ands	r3, r2
 80010ea:	603b      	str	r3, [r7, #0]

      if (pllsource != 0)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <SystemCoreClockUpdate+0x90>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <SystemCoreClockUpdate+0x104>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 80010fc:	6852      	ldr	r2, [r2, #4]
 80010fe:	0992      	lsrs	r2, r2, #6
 8001100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e00b      	b.n	8001124 <SystemCoreClockUpdate+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */

        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <SystemCoreClockUpdate+0x100>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 8001116:	6852      	ldr	r2, [r2, #4]
 8001118:	0992      	lsrs	r2, r2, #6
 800111a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	0c1b      	lsrs	r3, r3, #16
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	3301      	adds	r3, #1
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 800113e:	6013      	str	r3, [r2, #0]
      break;
 8001140:	e003      	b.n	800114a <SystemCoreClockUpdate+0xce>
    default:
      SystemCoreClock = HSI_VALUE;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <SystemCoreClockUpdate+0x100>)
 8001146:	601a      	str	r2, [r3, #0]
      break;
 8001148:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <SystemCoreClockUpdate+0xf8>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <SystemCoreClockUpdate+0x108>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <SystemCoreClockUpdate+0xfc>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023800 	.word	0x40023800
 8001178:	20000000 	.word	0x20000000
 800117c:	00f42400 	.word	0x00f42400
 8001180:	017d7840 	.word	0x017d7840
 8001184:	08001634 	.word	0x08001634

08001188 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff ff60 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	; (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011b6:	f000 f811 	bl	80011dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff ff0b 	bl	8000fd4 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80011cc:	0800164c 	.word	0x0800164c
  ldr r2, =_sbss
 80011d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011d4:	2000003c 	.word	0x2000003c

080011d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <__libc_init_array>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	4d0d      	ldr	r5, [pc, #52]	; (8001214 <__libc_init_array+0x38>)
 80011e0:	4c0d      	ldr	r4, [pc, #52]	; (8001218 <__libc_init_array+0x3c>)
 80011e2:	1b64      	subs	r4, r4, r5
 80011e4:	10a4      	asrs	r4, r4, #2
 80011e6:	2600      	movs	r6, #0
 80011e8:	42a6      	cmp	r6, r4
 80011ea:	d109      	bne.n	8001200 <__libc_init_array+0x24>
 80011ec:	4d0b      	ldr	r5, [pc, #44]	; (800121c <__libc_init_array+0x40>)
 80011ee:	4c0c      	ldr	r4, [pc, #48]	; (8001220 <__libc_init_array+0x44>)
 80011f0:	f000 f820 	bl	8001234 <_init>
 80011f4:	1b64      	subs	r4, r4, r5
 80011f6:	10a4      	asrs	r4, r4, #2
 80011f8:	2600      	movs	r6, #0
 80011fa:	42a6      	cmp	r6, r4
 80011fc:	d105      	bne.n	800120a <__libc_init_array+0x2e>
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
 8001200:	f855 3b04 	ldr.w	r3, [r5], #4
 8001204:	4798      	blx	r3
 8001206:	3601      	adds	r6, #1
 8001208:	e7ee      	b.n	80011e8 <__libc_init_array+0xc>
 800120a:	f855 3b04 	ldr.w	r3, [r5], #4
 800120e:	4798      	blx	r3
 8001210:	3601      	adds	r6, #1
 8001212:	e7f2      	b.n	80011fa <__libc_init_array+0x1e>
 8001214:	08001644 	.word	0x08001644
 8001218:	08001644 	.word	0x08001644
 800121c:	08001644 	.word	0x08001644
 8001220:	08001648 	.word	0x08001648

08001224 <memset>:
 8001224:	4402      	add	r2, r0
 8001226:	4603      	mov	r3, r0
 8001228:	4293      	cmp	r3, r2
 800122a:	d100      	bne.n	800122e <memset+0xa>
 800122c:	4770      	bx	lr
 800122e:	f803 1b01 	strb.w	r1, [r3], #1
 8001232:	e7f9      	b.n	8001228 <memset+0x4>

08001234 <_init>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	bf00      	nop
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr

08001240 <_fini>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	bf00      	nop
 8001244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001246:	bc08      	pop	{r3}
 8001248:	469e      	mov	lr, r3
 800124a:	4770      	bx	lr
